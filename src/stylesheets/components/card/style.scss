$white: rgba(255, 255, 255, 1);
$gray: #A1a1a1;
// ==========================================================================
// Breakpoint Mixin
// See https://wpcalypso.wordpress.com/devdocs/docs/coding-guidelines/css.md#media-queries
// ==========================================================================

$breakpoints: 480px, 660px, 960px, 1040px, 1280px, 1600px; // Think very carefully before adding a new breakpoint

@mixin breakpoint( $sizes... ) {
  @each $size in $sizes {
    @if type-of($size) == string {
      $approved-value: 0;
      @each $breakpoint in $breakpoints {
        $and-larger: ">" + $breakpoint;
        $and-smaller: "<" + $breakpoint;

        @if $size == $and-smaller {
          $approved-value: 1;
          @media (max-width: $breakpoint) {
            @content;
          }
        } @else {
          @if $size == $and-larger {
            $approved-value: 2;
            @media (min-width: $breakpoint + 1) {
              @content;
            }
          } @else {
            @each $breakpoint-end in $breakpoints {
              $range: $breakpoint + "-" + $breakpoint-end;
              @if $size == $range {
                $approved-value: 3;
                @media (min-width: $breakpoint + 1) and (max-width: $breakpoint-end) {
                  @content;
                }
              }
            }
          }
        }
      }
      @if $approved-value == 0 {
        $sizes: "";
        @each $breakpoint in $breakpoints {
          $sizes: $sizes + " " + $breakpoint;
        }
        // TODO - change this to use @error, when it is supported by node-sass
        @warn "ERROR in breakpoint( #{ $size } ): You can only use these sizes[ #{$sizes} ] using the following syntax [ <#{ nth( $breakpoints, 1 ) } >#{ nth( $breakpoints, 1 ) } #{ nth( $breakpoints, 1 ) }-#{ nth( $breakpoints, 2 ) } ]";
      }
    } @else {
      $sizes: "";
      @each $breakpoint in $breakpoints {
        $sizes: $sizes + " " + $breakpoint;
      }
      // TODO - change this to use @error, when it is supported by node-sass
      @warn "ERROR in breakpoint( #{ $size } ): Please wrap the breakpoint $size in parenthesis. You can use these sizes[ #{$sizes} ] using the following syntax [ <#{ nth( $breakpoints, 1 ) } >#{ nth( $breakpoints, 1 ) } #{ nth( $breakpoints, 1 ) }-#{ nth( $breakpoints, 2 ) } ]";
    }
  }
}

// Alerts
$alert-yellow: #f0b849;
$alert-red: #F26175;
$alert-green: #4ab866;
$alert-purple: #855DA6;
// Primary Accent (Blues)
$blue-wordpress: #3B4859;
$blue-light: #EFF2F7;
$blue-medium: #3B7CFF;
$link-highlight: tint($blue-medium, 20%);
@import "../../shared/mixins/mixins";

.card {
  display: block;
  position: relative;
  margin: 0 auto 10rpx auto;
  padding: 16px;
  box-sizing: border-box;
  background: $white;
  box-shadow: 0 0 0 1px transparentize(lighten($gray, 20%), .5),
  0 1px 2px lighten($gray, 30%);
  .animate-box {
    opacity: 0;
  }
  .fadeInUp {
    -webkit-animation-name: fadeInUp;
    animation-name: fadeInUp;
  }
  .animated-fast {
    -webkit-animation-duration: .5s;
    animation-duration: .5s;
    -webkit-animation-fill-mode: both;
    animation-fill-mode: both;
  }
  @include clear-fix;

  @include breakpoint(">480px") {
    margin-bottom: 16px;
    padding: 24px;
  }

  // Compact Card
  &.is-compact {
    margin-bottom: 1px;

    //@include breakpoint(">480px") {
    padding: 16px 24px;
    //}
  }

  &.is-card-link {
    padding-right: 48px;
  }

  &.is-error {
    box-shadow: inset 3px 0 0 $alert-red;
  }

  &.is-info {
    box-shadow: inset 3px 0 0 $blue-wordpress;
  }

  &.is-success {
    box-shadow: inset 3px 0 0 $alert-green;
  }

  &.is-warning {
    box-shadow: inset 3px 0 0 $alert-yellow;
  }
}

// Clickable Card
.card__link-indicator {
  color: lighten($gray, 20%);
  display: block;
  height: 100%;
  position: absolute;
  top: 0;
  right: 16px;
}

a.card:hover {
  .card__link-indicator {
    color: lighten($gray, 10%);
  }
}

a.card:focus {
  outline: 0;

  .card__link-indicator {
    color: $link-highlight;
  }
}

@keyframes fadeInUp {
  0% {
    opacity: 0;
    visibility: hidden;
    -webkit-transform: translate3d(0, 40px, 0);
    transform: translate3d(0, 40px, 0);
  }
  100% {
    visibility: visible;
    opacity: 1;
    -webkit-transform: none;
    transform: none;
  }
}
