<style lang="scss">
  .gridicon {
    fill: currentColor;

    &.needs-offset g {
      transform: translate(1px, 1px); /* translates to .5px because it's in a child element */
    }

    &.needs-offset-x g {
      transform: translate(1px, 0); /* only nudges horizontally */
    }

    &.needs-offset-y g {
      transform: translate(0, 1px); /* only nudges vertically */
    }
  }

  /*@import '../stylesheets/style';*/

  .tab_item {
    height: 100%;
  }

  page, .body {
    height: 100%;
    font-family: '\5FAE\8F6F\96C5\9ED1', arial;
    /*background-color: #f0eff5;*/
  }
</style>
<template>

  <view class="body">
    <view wx:if="{{currentTab === 0}}">
      <adswiper :config.sync="swiper"></adswiper>

      <view class="tab_item">

        <repeat for="{{list}}" key="index" index="index" item="item">
          <podcast-card :item.sync="item" :id="item.id" style="margin-top: 20px"></podcast-card>
        </repeat>
        <view style="height: 100rpx;"></view>
      </view>
    </view>

    <!--<view class="list-end"></view>-->
    <me class="tab_item" wx:if="{{currentTab === 1}}"></me>
    <tab-bar :active.sync="currentTab" :curplay.sync="curplay"/>
    <!--<toast/>-->
  </view>
</template>

<script>

  /* eslint-disable no-undef,no-throw-literal */
  import wepy from 'wepy'
  import http from '../mixins/http'
  import base from '../mixins/base'
  import user from '../mixins/user'

  import AdSwiper from '../components/AdSwiper'
  import PodcastCard from '../components/podcast-card'

  import Me from '../components/profile'
  import TabBar from '../components/TabBar'
  //  import Toast from 'wepy-com-toast'
  import {api} from '../config'
  import moment from 'moment'

  const device = wx.getSystemInfoSync()  //  获取设备信息
  const $wxapp = wepy.$instance

  export default class Index extends wepy.page {
    mixins = [base, http, user]
    config = {
      'navigationBarTitleText': '育儿柚道',
      'enablePullDownRefresh': true,
      'backgroundTextStyle': 'dark'
    }
    components = {
      'podcast-card': PodcastCard,
      adswiper: AdSwiper,
//      recommend: Recommend,
      me: Me,
      'tab-bar': TabBar
//      toast: Toast
    }
    data = {
      current: {
        isExpanded: false
      },
      isExpanded: true,
      isCompact: true,
      scrollTop: 100,
      items: [],
      currentTab: 0,
      detail: {
        scrollHeight: device.windowHeight + 120
      },
      height: device.windowHeight,
      curplay: {
        title: '',
        authorInfo: {}
      },
      swiper: {},
      recommend: [],
      list: [],
      page: 1,
      totalPages: 1,
      sticky: {},
      headers: {}
    }
    methods = {
      headerTapAction (index, item) {
        this.current.id = item.id
        if (Object.is(this.recommend[index].isExpanded, undefined)) {
          this.recommend[index].isExpanded = true
          return
        }
        this.recommend[index].isExpanded = !this.recommend[index].isExpanded
      },
      toAuthorPage (id) {
        wx.navigateTo({
          url: '/pages/author?id=' + id
        })
      },
      compact () {
      },
      tap (item) {
        wx.navigateTo({
          url: '/pages/detail?id=' + item.id,
          success (res) {
          }
        })
      }
    }
    watch = {
      currentTab (old, newValue) {
        if (newValue === 0) {
          $wxapp.emitter.emit('onShowMe')
        }
      }
    }
    events = {
      'tab-change': (active, $event) => {
      },
      'header-tap': () => {
//        console.log('page header tap')
//        wx.navigateTo({
//          url: `/pages/detail?id=${this.id}&parent=${this.id}`
//        })
      }
    }
    computed = {}

    async getSticky (id) {
      const req = Object.assign(api.common.get, {data: {id: id}, headers: this.headers})
      await this.$request(req, {
        success: ({code, data}) => {
          this.sticky = data
          this.curplay = Object.assign({}, this.sticky, {play_status: 'stop'})
          $wxapp.globalData.curplay = this.curplay
        }
      })
    }

    async onLoad () {
      const that = this
      // 获取配置信息
      if (JSON.stringify($wxapp.globalData.options) === '{}') {
        await this.$get(Object.assign({}, api.common.options, {headers: this.headers}), {
          success: async ({code, data}) => {
            this.swiper = data.swiper
            this.options = data
            await $wxapp.$updateGlobalData('options', data)
            this.$apply()
            $wxapp.emitter.emit('onload')
          }
        })
      } else {
        this.swiper = this.options.swiper
      }
      $wxapp.emitter.on('onload', async () => {
        const _token = await wepy.getStorageSync('_token')
        console.log(_token)
        if (!_token) {
          console.log('这里。。。')
          await this.$getUserInfo(async (data) => {
            const req = Object.assign({}, api.user.login, {
              headers: {
                'x-wechat-code': data.code,
                'x-wechat-encrypted': data.encryptedData,
                'x-wechat-iv': data.iv
              },
              dataType: 'json'
            })
            await this.$post(req, {
              success: async ({code, data}) => {
//            console.log(JSON.stringify(data))
                await wepy.setStorage({
                  key: '_token',
                  data: data.token
                })
                this.headers = {
                  'Authorization': `Bearer ${wepy.getStorageSync('_token')}`
                }
                this.$apply()
                // 初次加载列表内容
//                $wxapp.emitter.emit('onload')
                await this.getSticky($wxapp.globalData.options.stickys[0])
                await this.loadData()
              }
            })
          })
        } else {
          this.headers = {
            'Authorization': `Bearer ${wepy.getStorageSync('_token')}`
          }
//          await this.getSticky($wxapp.globalData.options.stickys[0])
//          await this.loadData()
          await this.getSticky($wxapp.globalData.options.stickys[0])
          await this.loadData()
        }
      })
//      $wxapp.emitter.emit('onload')
      $wxapp.emitter.on('tab-change', async (active) => {
        if (active === 1) {
          this.$invoke('me', 'onShow')
        } else {
          await that.onShow()
        }
      })
    }

    async onShow () {
      console.log('on show me ...')
      this.currentTab = 0
    }

    slideAnimation (translate = 0, speed = 300, timingFunction = 'ease-in-out') {
      const REG = {
        TRANSLATE: /^(0|[1-9][0-9]*|-[1-9][0-9]*)$/,
        SPEED: /^(0|[1-9][0-9]*|-[1-9][0-9]*)$/,
        TIMINGFUNCTION: /linear|ease|ease-in|ease-in-out|ease-out|step-start|step-end/
      }

      const {XORY, animationViewName, consoleException} = this
      try {
        /**
         * 异常处理
         */
        if (!REG.TRANSLATE.test(translate)) throw 'paramType'
        if (!REG.SPEED.test(speed)) throw 'paramType'
        if (!REG.TIMINGFUNCTION.test(timingFunction)) throw 'paramType'
        /**
         * 创建一个动画实例
         */
        const animation = wx.createAnimation({
          transformOrigin: '50% 50% 0',
          duration: speed,
          timingFunction,
          delay: 0
        })
        animation[`translate${XORY}`](translate).step()  //  动画描述
        this.syncView(animationViewName, animation)  //  同步动画到视图
      } catch (err) {
        consoleException(err, 'slideAnimation[Function]')
      }
    }

    /**
     * 同步设置到视图
     * @param DEFAULT：默认参数
     * @param param：构造参数
     */
    syncView (viewName, prop) {
      this[`${viewName}`] = prop
//      console.log(viewName)
      this.$apply()
    }

    async onPullDownRefresh () {
      if (this.currentTab === 0) {
        this.page = 1
        await this.loadData()
      }
    }

    async onReachBottom () {
      if (this.currentTab === 0) {
        this.page++
        if (this.page <= this.totalPages) {
          await this.loadData()
        }
      }
    }

    async loadData () {
      const req = Object.assign({}, api.common.list, {data: {page: this.page}, headers: this.headers})
      await this.$request(req, {
        success: async ({code, data}) => {
          this.totalPages = data.totalPages
          if (this.page === 1) {
            this.list = data.data
          } else {
            this.list.push(...data.data)
          }
          for (let item of this.list) {
            item._ = {
              header_collapsed: false,
              expanded: true
            }
            item.modified = moment(item.modified).fromNow()
            await this.loadChildList(item, item.id)
          }
          wepy.stopPullDownRefresh()
          this.$apply()
        },
        fail: (statusCode, data) => {
          wepy.showModal({
            title: '提示',
            content: `加载列表失败,请重试或联系我们。${statusCode}`
          })
        }
      })
    }

    async loadChildList (item, parent) {
      const req = Object.assign({}, api.common.get, {data: {parent: parent}, headers: this.headers})
      await this.$request(req, {
        success: ({code, data}) => {
          item.list = data
          this.$apply()
        }
      })
    }

    /**
     * 错误对照
     */
    consoleException (type, place) {
      const ERROR = {
        'paramType': '参数类型错误',
        'bound': '参数越界'
      }
      console.log(`%c${place}:${ERROR[type]}`, 'color: red')
    }

    onShareAppMessage () {
      return {
        title: '育儿柚道',
        desc: '育儿柚道-育儿有道！',
        path: '/pages/index'
      }
    }

//    showToast (name) {
//      let promise = this.$invoke('toast', 'show', {
//        title: `${name}`,
//        img: 'https://raw.githubusercontent.com/kiinlam/wetoast/master/images/star.png'
//      })
//
//      promise.then((d) => {
//        console.log('toast done')
//      })
//    }
  }
</script>
