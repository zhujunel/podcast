<style lang="scss">
  .tab_item {
    height: 100%;
  }
  Page, .body {
    font-family: '\5FAE\8F6F\96C5\9ED1', arial;
    background: #FAFAFC;
    /*background: #ECEDF0;*/
    width: 100%;
    height: 100%;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    position: relative;
  }
  $bgcolor: #EFEFF4;
  .me {
    background-color: $bgcolor;
    height: 100%;
    padding-top: 40rpx;
    .info {
      display: flex;
      flex-direction: column;
      align-items: center;
      .avatar {
        width: 130rpx;
        height: 130rpx;
        border-radius: 50%;
      }
      .nickname {
        color: #aaa;
        padding: 10px;
        font-size: 32repx;
      }
    }
    .item {
      background-color: #fff;
      height: 100rpx;
      position: relative;
      box-sizing: border-box;
      padding: 15rpx 25rpx;
      border-bottom: 1px solid #eee;
    }
  }

  $border: 1px solid #eeeeee;
  .list {
    margin-top: 40rpx;
    background-color: #fff;
    border-bottom: $border;
    .item {
      height: 100rpx;
      position: relative;
      /*-webkit-box-sizing: border-box;*/
      /*-moz-box-sizing: border-box;*/
      box-sizing: border-box;
      padding: 20rpx;
      border-bottom: $border;
      .icon {
        width: 60rpx;
        height: 60rpx;
        position: absolute;
        margin-left: 15rpx;
      }
      .arrow_left {
        position: absolute;
        right: 20rpx;
        width: 30rpx;
        height: 40rpx;
        margin-top: -32rpx;
      }
      .title {
        padding: 18rpx 0 0 100rpx;
        display: block;
        font-size: 33rpx;
      }
    }
  }
</style>
<template>

  <view class="body" style="height: {{height}}px;">
    <!--<me :user.sync="userInfo" hidden="{{currentTab == 0}}"/>-->
    <!--<view hidden="{{currentTab != 1 }}">-->
      <!--<detail :option="detail"></detail>-->
    <!--</view>-->
    <view hidden="{{currentTab != 1 }}" class="me">
      <view class="info">
        <image class="avatar" src="{{ userInfo.avatarUrl }}" background-size="cover"/>
        <view class="nickname">{{ userInfo.nickName }}</view>
      </view>

      <view class="list">
        <!--<block wx:for-items="{{list}}" wx:for-index="index" wx:for-item="item">-->
        <!--<view class="item">-->
        <!--<image class="icon" src="../../images/podcast_on.png"></image>-->
        <!--<text class="title">我的柚道</text>-->
        <!--<image class="arrow_left" src="../images/arrow_left.png"></image>-->
        <!--</view>-->
        <view class="item">
          <image class="icon" src="../images/podcast_on.png"></image>
          <text class="title">我的订阅 </text>
          <!--<image class="arrow_left" src="../images/arrow_left.png"></image>-->
        </view>
        <!--<view class="item">-->
        <!--<image class="icon" src="../../images/ask_on.png"></image>-->
        <!--<text class="title">我的提问</text>-->
        <!--<image class="arrow_left" src="../images/arrow_left.png"></image>-->
        <!--</view>-->
        <!--</block>-->
      </view>
      <!--<album :list="dAlbum"/>-->
      <!--<emoji :list="dSetting"/>-->
      <!--<setting :list="dEmoji"/>-->
    </view>

    <recommend :option="swiper" hidden="{{currentTab != 0}}"/>
    <tab :active="currentTab" :curplay.sync="curplay"/>
    <toast/>
  </view>
</template>

<script>
  /* eslint-disable no-undef,no-throw-literal */
  const items = require('../mocks/data.js')
  import wepy from 'wepy'
  import Recommend from '../components/recommend'
//  import Detail from '../components/detail'
//  import Me from '../components/profile'
  import Tab from '../components/toolbar'
  import Toast from 'wepy-com-toast'
  const device = wx.getSystemInfoSync()  //  获取设备信息
  const $wxapp = wepy.$instance
  export default class Index extends wepy.page {
    config = {
      'navigationBarTitleText': '育儿柚道',
      'navigationBarTextStyle': 'white',
      'navigationBarBackgroundColor': '#3b3a40',
      'disableScroll': true
    }
    components = {
//      detail: Detail,
      recommend: Recommend,
//      me: Me,
      tab: Tab,
      toast: Toast
    }
    data = {
      userInfo: {},
      swiper: {
        direction: 'horizontal',
        slideLength: items.length,
        items: items,
//        curplay: $wxapp.globalData.curplay,
        /**
         * swiper初始化后执行
         * @param swiper
         */
        onInit (weswiper) {
        },
        /**
         * 手指碰触slide时执行
         * @param swiper
         * @param event
         */
        onTouchStart (weswiper, event) {

        },
        /**
         * 手指碰触slide并且滑动时执行
         * @param swiper
         * @param event
         */
        onTouchMove (weswiper, event) {

        },
        /**
         * 手指离开slide时执行
         * @param swiper
         * @param event
         */
        onTouchEnd (weswiper, event) {

        },
        /**
         *  slide达到过渡条件时执行
         */
        onSlideChangeStart (weswiper) {

        },
        /**
         *  swiper从一个slide过渡到另一个slide结束时执行
         */
        onSlideChangeEnd (weswiper) {

        },
        /**
         *  过渡时触发
         */
        onTransitionStart (weswiper) {

        },
        /**
         *  过渡结束时执行
         */
        onTransitionEnd (weswiper) {

        },
        /**
         *  手指触碰swiper并且拖动slide时执行
         */
        onSlideMove (weswiper) {

        },
        /**
         * slide达到过渡条件 且规定了方向 向前（右、下）切换时执行
         */
        onSlideNextStart (weswiper) {

        },
        /**
         *  slide达到过渡条件 且规定了方向 向前（右、下）切换结束时执行
         */
        onSlideNextEnd (weswiper) {

        },
        /**
         *  slide达到过渡条件 且规定了方向 向前（左、上）切换时执行
         */
        onSlidePrevStart (swiper) {

        },
        /**
         *  slide达到过渡条件 且规定了方向 向前（左、上）切换结束时执行
         */
        onSlidePrevEnd (weswiper) {

        }
      },
      currentTab: 0,
      detail: {
        scrollHeight: device.windowHeight + 120
      },
      XORY: 'X',
      height: device.windowHeight,
      animationData: '',
      animationViewName: 'animationData',
      curplay: $wxapp.globalData.curplay,
      background: ''
    }
    methods = {
    }
    watch = {
    }
    events = {
      'tab-change': (active, $event) => {
//        console.log('Active===' + active)
//        console.log($event)
//        console.log(active)
//        this.currentTab = active
//        this.$apply()
//        this.slideAnimation(0, 500)
      }
    }
    onLoad() {
      let self = this
      this.$parent.getUserInfo(function (userInfo) {
        if (userInfo) {
          self.userInfo = userInfo
        }
//        console.log(self.userInfo)
        self.$apply()
      })
      this.curplay = {
        id: '2',
        anchor: {
          name: '叶青',
          avatar: 'https://media.alearning.com.cn/podcast/book/2/anchor.jpg'
        },
        songname: '交流密码：我说的你听懂了吗？（3-6岁）',
        status: 'stop',
        src: 'https://media.alearning.com.cn/podcast/book/2/202.mp3'
      }
      $wxapp.globalData.curplay = this.curplay
      $wxapp.emitter.emit('onload')
      $wxapp.emitter.on('tab-change', (active) => {
        self.currentTab = active
        self.$apply()
      })
    }
    onShow() {
      this.currentTab = 0
//      if ($wxapp.globalData.playing) {
//        this.showToolbar = false
//      }
      // this.$invoke('message', 'loadMessage')
    }
    slideAnimation(translate = 0, speed = 300, timingFunction = 'ease-in-out') {
      const REG = {
        TRANSLATE: /^(0|[1-9][0-9]*|-[1-9][0-9]*)$/,
        SPEED: /^(0|[1-9][0-9]*|-[1-9][0-9]*)$/,
        TIMINGFUNCTION: /linear|ease|ease-in|ease-in-out|ease-out|step-start|step-end/
      }

      const {XORY, animationViewName, consoleException} = this
      try {
        /**
         * 异常处理
         */
        if (!REG.TRANSLATE.test(translate)) throw 'paramType'
        if (!REG.SPEED.test(speed)) throw 'paramType'
        if (!REG.TIMINGFUNCTION.test(timingFunction)) throw 'paramType'
        /**
         * 创建一个动画实例
         */
        const animation = wx.createAnimation({
          transformOrigin: '50% 50% 0',
          duration: speed,
          timingFunction,
          delay: 0
        })
        animation[`translate${XORY}`](translate).step()  //  动画描述
        this.syncView(animationViewName, animation)  //  同步动画到视图
      } catch (err) {
        consoleException(err, 'slideAnimation[Function]')
      }
    }

    /**
     * 同步设置到视图
     * @param DEFAULT：默认参数
     * @param param：构造参数
     */
    syncView(viewName, prop) {
      this[`${viewName}`] = prop
//      console.log(viewName)
      this.$apply()
    }
    /**
     * 错误对照
     */
    consoleException(type, place) {
      const ERROR = {
        'paramType': '参数类型错误',
        'bound': '参数越界'
      }
      console.log(`%c${place}:${ERROR[type]}`, 'color: red')
    }

    onShareAppMessage () {
      return {
        title: '育儿柚道',
        desc: '育儿柚道-育儿有道！',
        path: '/pages/index'
      }
    }
    showToast(name) {
      let promise = this.$invoke('toast', 'show', {
        title: `${name}`,
        img: 'https://raw.githubusercontent.com/kiinlam/wetoast/master/images/star.png'
      })

      promise.then((d) => {
        console.log('toast done')
      })
    }
  }
</script>
