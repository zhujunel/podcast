<style>
  .player {
    width: 64rpx;
    height: 64rpx;
    display: block;
    margin-right: 20rpx;
  }
</style>
<template>
  <view>

    <foldable-card :expanded="isExpanded" class="is-compact">
      <view class="connected-application-item__header" slot="header">
        <view class="podcast__header">
          <view class="podcasts-browser-item">
            <view class="podcasts-browser-item__info">
              <view class="podcast-icon animate__appear">
                <image class="podcast-icon__img" style="width: 40px; height: 40px; background-color: #eeeeee;"
                       mode="aspectFill" src="{{item.authorInfo.avatar}}"></image>
              </view>
              <view class="podcasts-browser-item__title">
                {{ item.title }}
              </view>
              <view class="podcasts-browser-item__author">- {{ item.authorInfo.user_nicename }}</view>
            </view>

          </view>

        </view>
      </view>
      <view slot="summary">
        {{ item.title }}
      </view>
      <view slot="expandedSummary">
       详情

      </view>
      <view class="plugin-meta__banner {{ item._.header_collapsed ? '': 'is-collapsed'}}" wx:if="{{item.featured_image}}">
        <image class="plugin-meta__banner-image post-image__image"
               mode="{{item._.header_collapsed ? 'aspectFit': 'aspectFill'}}" src="{{item.featured_image}}"
               @tap="tapImage({{item.featured_image}})"></image>
      </view>
      <view class="card is-compact is-empty" wx:if="{{item.content}}">
        {{ item.content}}
      </view>
      <!--<view class="post-image {{ item._.header_collapsed ? '': 'is-collapsed'}}" style="background: url({{item._.header_collapsed ? '' : item.featured_image}})" wx:if="item.featured_image" @tap="handleTap">-->
      <!--<image class="post-image__image" mode="aspectFit" src="{{item.featured_image}}" wx:if="{{item._.header_collapsed}}"></image>-->
      <!--</view>-->
      <view class="podcast">
        <scroll-view scroll-x="true" class="episode">
          <view class="episode-audio_card upgrade-nudge is-card-link is-compact" wx:for-items="{{item.list}}" wx:for-index="index" wx:for-item="item" wx:key="id">
            <image class="gridicon gridicon-chevron-right player" src="../images/quick/play_big.png" ></image>
            <!--<svg class="gridicon gridicons-chevron-right card__link-indicator" height="24" width="24" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g><path d="M10 20l8-8-8-8-1.414 1.414L15.172 12l-6.586 6.586"></path></g></svg><svg class="gridicon gridicons-star upgrade-nudge__icon needs-offset" height="18" width="18" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g><path d="M12 2l2.582 6.953L22 9.257l-5.822 4.602L18.18 21 12 16.89 5.82 21l2.002-7.14L2 9.256l7.418-.304"></path></g></svg>-->
            <view class="upgrade-nudge__info">
              <view class="upgrade-nudge__title">{{item.title}}</view>
              <view class="upgrade-nudge__message">10/22</view>
            </view>
          </view>
        </scroll-view>
      </view>
    </foldable-card>

  </view>

</template>
<script>
  /* eslint-disable no-undef */

  import wepy from 'wepy'
  import FoldableCard from '../components/FoldableCard'
  import Card from '../components/card'

  export default class PodcastHeader extends wepy.component {
    props = {
      id: String,
      item: Object,
      isExpanded: {
        type: Boolean,
        default: true
      }
    }
    data = {
      id: '',
      imageList: []
    }
    components = {
      'card': Card,
      'foldable-card': FoldableCard
    }
    methods = {
      handleTap () {
        this.item._.header_collapsed = !this.item._.header_collapsed
      },
      tapImage (image) {
//        const current = e.target.src
        this.imageList.push(image)
//        console.log(JSON.stringify(this.imageList))
        wx.previewImage({
          current: image,
          urls: this.imageList,
          fail () {
          },
          complete () {
          }
        })
      }
//      async load () {
//        console.log('id ====' + this.id)
//
//        console.log(JSON.stringify(this.item))
//      }
    }

    async onComponentLoad (value) {
//      await this.load()
      console.log('podcast-header invoke on load ...')
//      console.log(JSON.stringify(value))
//      console.log('podcast-header invoke on load ...')
//      console.log('id ====' + this.id)
//
//      console.log(JSON.stringify(this.item))
    }

    onLoad () {
//      const {item} = this
//      const data = Object.assign(this, item)
//      console.log('on load ...')
//      console.log(data.item)
//      this.$apply()
//      console.log(JSON.stringify(data))
//      console.log('on load end ...')
//      console.log('id ====' + this.id)

//      console.log('lalalaa....')
//      console.log(JSON.stringify(this.item))
    }
  }

</script>
